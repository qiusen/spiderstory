<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dihaitech.spiderstory.dao.ITempleteDAO">
	
	<cache flushInterval="600000" eviction="LRU" type="org.mybatis.caches.oscache.OSCache"/>
	
	<sql id="templeteLikeWhere">
		<where>
            <if test ="id != null and id > -1">
				and `ID` = #{id}
			</if>
	        <if test ="name != null and name != ''">
			    and `NAME` like '%${name}%'
		    </if>
            <if test ="type != null and type > -1">
				and `TYPE` = #{type}
			</if>
	        <if test ="content != null and content != ''">
			    and `CONTENT` like '%${content}%'
		    </if>
	        <if test ="createuser != null and createuser != ''">
			    and `CREATEUSER` like '%${createuser}%'
		    </if>
	        <if test ="updateuser != null and updateuser != ''">
			    and `UPDATEUSER` like '%${updateuser}%'
		    </if>
		</where>
	</sql>
	
	<sql id="templetePage">
		<if test="null != start">
		  limit #{start},#{pageSize}
		</if>
	</sql>
	
	<sql id="templeteField">
		`ID`, `NAME`, `TYPE`, `CONTENT`, `CREATEUSER`, `CREATETIME`, `UPDATEUSER`, `UPDATETIME`
	</sql>
	
	<resultMap id="templeteMap" type="templete">
	    	<result property="id" column="ID" javaType="java.lang.Integer" jdbcType="INTEGER" />
	    	<result property="name" column="NAME" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="type" column="TYPE" javaType="java.lang.Integer" jdbcType="INTEGER" />
	    	<result property="content" column="CONTENT" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="createuser" column="CREATEUSER" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="createtime" column="CREATETIME" javaType="java.util.Date" jdbcType="TIMESTAMP" />
	    	<result property="updateuser" column="UPDATEUSER" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="updatetime" column="UPDATETIME" javaType="java.util.Date" jdbcType="TIMESTAMP" />
	</resultMap>
	
	<insert id="addSaveTemplete" parameterType="templete">
		insert into `templete` (
           `NAME`, 
           `TYPE`, 
           `CONTENT`, 
           `CREATEUSER`, 
           `CREATETIME`, 
           `UPDATEUSER`, 
           `UPDATETIME`
		) values 
		(
            #{name}, 
            #{type}, 
            #{content}, 
            #{createuser}, 
            #{createtime}, 
            #{updateuser}, 
            #{updatetime}
		)
		<selectKey keyProperty="id"  resultType="java.lang.Integer">
			select last_insert_id() as id from `templete` limit 1
		</selectKey>
	</insert>
	
	<delete id="deleteByIds" parameterType="String">
		delete from `templete` ${_parameter}
	</delete>
	
	<update id="editSaveTemplete" parameterType="templete">
		update `templete` set 
              `NAME` = #{name}, 
              `TYPE` = #{type}, 
              `CONTENT` = #{content}, 
              `UPDATEUSER` = #{updateuser}, 
              `UPDATETIME` = #{updatetime}
        	where ID = #{id}
	</update>
	
	<select id="selectTempleteById" parameterType="templete" resultMap="templeteMap"  >
		SELECT * FROM `templete` where ID = #{id}
	</select>
	
	<select id="getTempleteCount" parameterType="templete" resultType="Long" >
		select count(*) from `templete`
		<include refid="templeteLikeWhere" />
	</select>
	
	<select id="selectAll" parameterType="templete" resultMap="templeteMap" >
		select * from `templete`
	</select>
	
	<select id="selectTempleteLike" parameterType="templete" resultMap="templeteMap" >
		SELECT <include refid="templeteField" /> FROM `templete`
	        <include refid="templeteLikeWhere" />
			order by ID desc
	        <include refid="templetePage" /> 
	</select>
	
	<select id="selectTempleteByType" parameterType="templete" resultMap="templeteMap" >
		SELECT <include refid="templeteField" /> FROM `templete`
	        where `TYPE` = #{type}
			order by ID 
	</select>
	
	<select id="selectTempleteByIds" parameterType="templete" resultMap="templeteMap" >
		SELECT <include refid="templeteField" /> FROM `templete`
	        where `ID` in (${idStr})
			order by ID 
	</select>
</mapper>